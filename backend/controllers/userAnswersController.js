import pool from '../config/db.js'



export const submitAnswers = async (req, res) => {
    const { userId = null, testId, answers } = req.body;

    try {
        // üõë –ï—Å–ª–∏ –≥–æ—Å—Ç—å, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if (!userId) {
            await pool.query(`DELETE FROM user_answers WHERE test_id = $1 AND user_id IS NULL`, [testId]);
        } else {
            // üõë –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã
            await pool.query(`DELETE FROM user_answers WHERE test_id = $1 AND user_id = $2`, [testId, userId]);
        }

        // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
        for (const answer of answers) {
            await pool.query(
                `INSERT INTO user_answers (user_id, test_id, question_id, user_answer) VALUES ($1, $2, $3, $4)`,
                [userId, testId, answer.questionId, JSON.stringify(answer.userAnswer)]
            );
        }

        // ‚úÖ –°—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–¥–∞–∂–µ –¥–ª—è –≥–æ—Å—Ç—è)
        const results = await getTestResults(testId, userId);
        return res.json(results);

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
export const getTestResults = async (testId, userId = null) => {
    let userAnswers;

    if (userId) {
        // üîπ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –±–µ—Ä—ë–º –µ–≥–æ –æ—Ç–≤–µ—Ç—ã
        userAnswers = await pool.query(
            `SELECT question_id, user_answer 
             FROM user_answers 
             WHERE test_id = $1 AND user_id = $2`,
            [testId, userId]
        );
    } else {
        // üîπ –ï—Å–ª–∏ –≥–æ—Å—Ç—å, –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (—É–±–∏—Ä–∞–µ–º created_at)
        userAnswers = await pool.query(
            `SELECT question_id, user_answer 
             FROM user_answers 
             WHERE test_id = $1 AND user_id IS NULL 
             LIMIT 10`, 
            [testId]
        );
    }

    // üîπ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    const correctAnswers = await pool.query(
        `SELECT id AS question_id, answer FROM questions WHERE test_id = $1`,
        [testId]
    );

    const userAnswersMap = Object.fromEntries(userAnswers.rows.map(a => [a.question_id, a.user_answer]));
    const correctAnswersMap = Object.fromEntries(correctAnswers.rows.map(q => [q.question_id, q.answer]));

    let correctCount = 0;
    let totalQuestions = correctAnswers.rows.length;

    const results = correctAnswers.rows.map(q => {
        const userAnswer = userAnswersMap[q.question_id] ?? null;
        const correctAnswer = correctAnswersMap[q.question_id];

        const isCorrect = JSON.stringify(userAnswer) === JSON.stringify(correctAnswer);
        if (isCorrect) correctCount++;

        return { questionId: q.question_id, userAnswer, correctAnswer, isCorrect };
    });

    return {
        userId, // –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL
        testId,
        totalQuestions,
        correctCount,
        scorePercentage: (correctCount / totalQuestions) * 100,
        results
    };
};



// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ)
export const getResults = async (req, res) => {
    const { userId, testId } = req.params;
    try {
        const results = await getTestResults(userId, testId);
        res.json(results);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};
